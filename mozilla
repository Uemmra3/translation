ゲームとゲーム技術向けプラットフォームとしてのWebの更なる進歩やアピールのため、Mozillaはゲームに特化したロードマップを発行しました。要するに、これは高パフォーマンスで、プラグインなしのWeb上のゲームに関するものです。最近数年で、我々はめざましい進歩をとげました。この流れを続けるため、Mozillaはゲーム開発者やツールメーカーと協働し、コミュニティにより大きな力を与える追加改良を割り出しました。次のロードマップは、我々が受けたフィードバックと、そのフィードバックに応えて現在追求している解決策の両方をざっと示しています。このロードマップは変化しがちであるかもしれません。

Webアセンブリが明らかになるにつれ、各プラウザはWebパフォーマンスがネィティブレベルになるよう、共通の対策を取ってきています。このロードマップは、ゲーム開発者
が最善のエクスペリエンスを提供するためにWebプラットフォームに追加された機能について、より広がった視点をざっと示します。ゲームはしばしば、その要求する性質
から、技術を進める大きなきっかけになります。Webへの利益を最大化するために、解決策ができるだけ広い範囲のアプリケーションに利益があることを保証するよう、注意が払われています。

この文書には2つのレベルがあり、最初はロードマップの節で、現在開発中で来年に取り組める、合理的なレベルでの自信を持っているものを含んでいます。2つ目は検討中の節で、研究活動中のトピックを含んでいます。

===============

ロードマップ

    開発者に、ハードウェアの並行性をより良く利用できるようにする
        開発者はWeb上でマルチスレッドのゲームが効率よく動作するようにするのに格闘しています:
            共有配列バッファの標準化、実装、出荷 [1,2].
            Emscriptenへのpthreadサポート追加 [1,2].
            パフォーマンスに敏感なWeb APIをWebワーカに晒す: WebGL, WebSockets, IndexedDB, WebAudio, WebRTC, WebVR.
            ワーカ間でコンパイル済みコード(asm.js や WebAssembly) を共有する [1].
        開発者は SIMD ハードウェアがコード最適化してくれるのを望んでいます:
            SIMD.jsの標準化、実装、出荷 [1,2].
            SIMD を WebAssembly 内に含める [1].
            EmscriptenへのSIMD サポート追加 [1].
    大規模なコンパイル済みコードベースのコールドロード時間を改善する
        開発者は、数百万業のコンパイル済みコードベースのダウンロード、コンパイル、スタートアップ時間が減らされることを望んでいます。
            WebAssembly は目立ったダウンロードサイズ圧縮を提供するでしょう (polyfill経由でのネイティブサポートがなされる以前であっても) [1].
            ネイティブにデコードされた WebAssembly は JavaScript/asm.js のパーズよりも、はるかに高速でしょう [1].
            WebAssembly/asm.js に高速コンパイラを追加して、バックグラウンドのスレッド内で完全な最適化コンパイルを進めて、アプリが素早く起動できるようにする [1].
            メインスレッド以外で、パーズ/コンパイルをストリーミング化 [1].
        開発者はHTTP コンテンツエンコードに依存するのを避けたがっています: 汎用的な圧縮にはgzipを使う
            Emscripten に対して、asm.js / WebAssembly 内で、ダウンロード中の展開(gzipよりもっと積極的なアルゴリズムを許可する)を実行するサポートを追加
    ブラウザストレージの能力を改良する
        Developers seeking to avoid the permission prompt associated with persistent storage hit limitations of temporary storage as currently implemented in browsers.
            Improve temporary quota limits to take into account factors like frecency.
            Provide more information on quota usage and allowance [1].
            Propose, standardize and implement finer-granularity units of evictable storage [1].
            Allow cross-origin storage usage [1].
        Developers that need persistent storage guarantees hit limitations of persistent storage as currently implemented in browsers.
            Standardize persistent storage so that other browsers implement [1].
            Reduce UI friction associated with the persistent permission prompt [1].
            Improve storage management/eviction UI for browser users.
    ブラウザのグラフィック能力を改良する
        Ship WebGL2 [1].
        Standardize and implement streaming WebGL canvas via WebRTC [1,2].
        Run WebGL on discrete hardware for systems with integrated+discrete (e.g. nVidia Optimus).
    Allow developers to better avoid 32-bit browser Out-of-Memory conditions.
        Ship 64-bit Firefox on 64-bit Windows.
        Avoid Emscripten in-memory Virtual File System for asset storage by leveraging pthreads and FileReaderSync to provide synchronous file I/O in workers.
    プラットフォームをまたいだパフォーマンスへの投資を続ける
        Significantly optimize WebAudio performance [1].
        Reduce WebGL shader compile times [1,2].
        Reduce latency and jitter in the browser’s rendering pipeline [1,2,3,4].
        Continue investments in the performance of JS, DOM, WebGL, WebRTC, codec, layout, rendering, compositing, animation, etc.
    Emscriptenへの投資を続ける
        Add support for pthreads, SIMD, and WebAssembly, as mentioned above.
        Further improve compilation speed.
    Firefox 開発ツールがより良いゲーム開発者サポートするよす投資を続ける
        Improve Web Worker support [1].
        Allow developers to break on various asm.js/WebAssembly error conditions [1].

製作中

    開発者は、負荷を分配するのにいくつのWebワーカを作成したら良いか決めるのに困っています。しばしばベンチマークメソッドが信頼できることがわかっています。
    開発者はFirefoxでのWebワーカがオリジン毎に20である制限につき当っており、もっと高い制限を要求しています。
    プロセス起動の初期に配分された大きな隣接ヒープで、ゲーム用の新鮮なアドレススペースを保証するマルチプロセスブラウザアーキテクチャをてこ入れします。
    メモリ不足(Out-of-Memory)エラーの報告メカニズムを研究して、安全な/サニタイズ済みの選別情報をWebアプリ開発者に戻す。
    IME 能力の改良のための新標準の共同研究 [1,2].
    ハードウェアカーソルAPIの追加 [1].
    ゲームパッドAPIの改良 [1].
    ポインターロックAPIへポインターをクリップする拡張を追加 [1].
    メモリ使用/リーク のデバッグ用Emscripten ツールの追加
    大規模なコンパイルコードに適した、よりスケーラブルなソースマップ形式の標準化(WebAssembly の一部や、より一般的に)
